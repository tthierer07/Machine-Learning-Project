x$get()
makeVector()
makeVector(1:10)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean()
x<1:10
x<-1:10
makeVector(x)
cachemean(x)
y<-makeVector(x)
cachemean(y)
cachemean(y)
y$set()
y$set(1)
cachemean(y)
y$set(1:10)
cachemean(y)
y$set()
y$getmean()
y$mean()
y$mean
y$setmean
function(mean)
m
x<1:10
x<-1:10
x <- function() x
x
x<-1:10
y <- function() x
y
m<<- mean
m
m(x)
s<- function(mean) m <<-mean
s
s(x)
s(x)
m
g<- finction() m
g<- function() m
c(g)
makevector(1:10)
makeVector(1:10)
y<-1:5
y$get()
data<-y$get()
data<-1$get()
makeVector(y)
m
set(1:20)
x$set(1:20)
x<-makeVector(1:10)
x$set(1:20)
cachemean(x)
matrix(1:4,2,2)
a<-matrix(1:4,2,2)
b<-solve(a) %% a
a %% b
b
?solve
help("solve")
diag(2)
temp<-diag(2)
solve(a)
solve(a) %% a
solve(a, ttemp)
solve(a, temp)
solve(a)%%a
a%%solve(a)
a
b<-solve(a)
b %% a
a %% b
b<-matrix(1:2,2,2)
b
a%%b
a
a*b
a %% b
a %*% b
b<-solve(a)
a %*% b
b %*% a
?%%
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y) {
x <<- y
Inv <<- NULL
}
get <- function() x
setInv <- function(inverse) Inv <<- inverse
getInv <- function() Inv
list(set = set, get = get, setInv = setInv,
getInv = getInv)
}
## This function takes the list generated form the previous
## function and uses the functions created within the list
## to read a cached matrix, calculate its inverse, and cache
## its inverse.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getInv()
if(!is.null(Inv)){
message("getting cached data")
return(Inv)
}
Matr <- x$get()
Inv <- solve(Matr)
x$setInv(Matr)
Inv
}
a
View(makeCacheMatrix)
makeCacheMatrix(a)
q<-makeCacheMatrix(a)
cacheSolve(q)
solve(a)
cacheSolve(q)
cacheSolve(q)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getInv()
if(!is.null(Inv)){
message("getting cached data")
return(Inv)
}
Matr <- x$get()
Inv <- solve(Matr)
x$setInv(Inv)
Inv
}
cacheSolve(q)
solve(a)
q<-makeCacheMatrix(a)
cacheSolve(q)
cacheSolve(q)
??partition
?:
?1:10
seq(from= 0, to = 2*pi, by = 30)
seq(0,2*pi, by = 30)
seq(0,2*pi)
seq(0,2*pi, 30)
seq(0,2*pi, length.out = 30)
x<-seq(0,2*pi, length.out = 30)
y<-function(x){sin(x)^2/(1-cos(x))^2}
y(x)
plot(x,y)
plot(x,y(x))
x<-seq(0,2*pi, length.out = 300)
plot(x,y(x))
plot(x,y(x), ylim = 200)
?transform
?factor
a <- c(1,2)
b<- c(3,4)
rbind(a,b)
?xyplot
library(lattice)
?xyplot
download.packages(ggplot)
download.packages("ggplot"")
download.packages("ggplot")
install.packages("ggplot")
install.packages("ggplot2")
library(lattice)
?llines
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
?geom
??geom
data("mtcars")
boxplot(mtcars$mpg, mtcars$am)
help(mtcars)
boxplot(mtcars$mpg, mtcars$am)
mtcars$am
plot(mtcars$mpg, mtcars$am)
plot(mtcars$mpg, mtcars$wt)
library(ggplot2)
ggplot(data = mtcars, mpg ~ wt)
help(ggplot)
ggplot(wt, mpg, data = mtcars)
qplot(wt, mpg, data = mtcars)
qplot(wt, mpg, data = mtcars, col = am)
data<- mtcars
data$am<- as.character(data$am)
qplot(wt, mpg, data = data, col = am)
fit<-lm(data$wt ~ data$mpg)
e <- resid(fit)
g<-qplot(wt, mpg, data = data, col = am)
g = g + fit
g = g + geom_smooth(method = "lm")
g
g<-qplot(wt, mpg, data = data)
g = g + geom_smooth(method = "lm")
g
g<-qplot(wt, mpg, data = data, col = am)
g = g + geom_smooth(method = "lm", se = FALSE)
g
g<- ggplot(data, aes(wt,mpg))
g + geom_point()
g + geom_point(aes(color = am))
g + geom_point(aes(color = am)) + geom_smooth(method = "lm")
`colnames(mtcars)
''
'
colnames(mtcars)
g<- ggplot(data, aes(wt,mpg))
g + geom_point(aes(color = am)) + geom_smooth(method = "lm") + facet_wrap(aes(cyl))
g + geom_point(aes(color = am)) + geom_smooth(method = "lm") + facet_wrap(cyl)
g + geom_point(aes(color = am)) + geom_smooth(method = "lm") + facet(.~cyl)
g<- ggplot(data, aes(wt,mpg), facet = .~cyl)
g
g<- ggplot(data, aes(wt,mpg))
g + geom_point(aes(color = am)) + geom_smooth(method = "lm") + facet_grid(.~cyl)
g<- ggplot(data, aes(cyl, wt))
g
g<- ggplot(data, aes(cyl, wt)) +geom_point()
g
?var
plot_1
set.seed(117)
lambda <- 0.2
expected_mean <- 1/lambda
expected_deviation <- 1/lambda
temp_mean <- NULL
temp_var <- NULL
for(i in 1:1000){
temp_data <- rexp(40, lambda)
temp_mean <- c(temp_mean, mean(temp_data))
temp_var <- c(temp_var, var(temp_data))
}
data_set <- data.frame(Test = 1:1000, Mean = temp_mean, Variance = temp_var)
plot_base <- ggplot(data_set)
plot_1 <- plot_base + geom_bar(aes(Mean)
plot_1 <- plot_1 + geom_vline(xintercept = 5)
plot_1
plot_base <- ggplot(data_set)
plot_1 <- plot_base + geom_bar(aes(Mean)
)
plot_base <- ggplot(data_set)
plot_1 <- plot_base + geom_bar(aes(Mean), color = "steelblue")
plot_1
plot_base <- ggplot(data_set)
plot_1 <- plot_base + geom_bar(aes(Mean), color = "blue")
plot_1
plot_1 <- plot_base + geom_bar(aes(Mean), color = "blue", fill = "steelblue")
plot_1
plot_1 <- plot_base + geom_bar(aes(Mean), color = "black", fill = "steelblue")
plot_1
?cumsum
cumsum(data_set$Mean)
plot2 <- plot_base + geomplot(aes(x = Test, y = cumsum(Mean)/x))
plot2 <- plot_base + geom_plot(aes(x = Test, y = cumsum(Mean)/x))
plot2 <- plot_base + geom_line(aes(x = Test, y = cumsum(Mean)/x))
plot2
plot2 <- plot_base + geom_plot(aes(x = Test, y = cumsum(Mean)/1:1000))
plot2 <- plot_base + geom_line(aes(x = Test, y = cumsum(Mean)/1:1000))
plot2
plot2 <- plot_base + geom_line(aes(x = Test, y = cumsum(Mean)/1:1000))
plot2 <- plot2 + geom_hline(yintercept = 5, size = 1, color = red)
plot2 <- plot2 + geom_line(aes(x = 1:100, y = cumsum(Mean)/1:100))
plot2 <- plot_base + geom_line(aes(x = Test, y = cumsum(Mean)/1:1000))
plot2 <- plot2 + geom_hline(yintercept = 5, size = 1, color = "red")
plot2 <- plot2 + geom_line(aes(x = 1:100, y = cumsum(Mean)/1:100))
plot2
plot2 <- plot_base + geom_line(aes(x = Test, y = cumsum(Mean)/1:1000))
plot2 <- plot2 + geom_hline(yintercept = 5, size = 1, color = "red")
plot2 <- plot2 + geom_line(aes(x = 1:100, y = cumsum(Mean[1:100])/1:100))
plot2
plot2 <- plot_base
plot2 <- plot2 + geom_hline(yintercept = 5, size = 1, color = "red")
plot2 <- plot2 + geom_line(aes(x = 1:100, y = cumsum(Mean[1:100])/1:100))
plot2
plot3 <- plot_base + geom_line(aes(x = Test, y = cumsum(Variance)/1:1000))
plot3 <- plot3 + geom_hline(yintercept = 25, size = 1, color = "red")
plot3
plot1 <- plot_base + geom_bar(aes(Mean), color = "black", fill = "steelblue")
plot1 <- plot1 + geom_vline(xintercept = 5, size = 1, color = "red")
plot2 <- plot_base + geom_line(aes(x = Test, y = cumsum(Mean)/1:1000), size = 1)
plot2 <- plot2 + geom_hline(yintercept = 5, size = 1, color = "red")
plot3 <- plot_base + geom_line(aes(x = Test, y = cumsum(Variance)/1:1000), size = 1)
plot3 <- plot3 + geom_hline(yintercept = 25, size = 1, color = "red")
plot4 <- plot_base + geom_bar(aes(Variance), color = "black", fill = "steelblue")
plot4 <- plot1 + geom_vline(xintercept = 25, size = 1, color = "red")
plot1
plot2
plot3
plot4
plot4 <- plot_base + geom_bar(aes(Variance), color = "black", fill = "steelblue")
plot4 <- plot4 + geom_vline(xintercept = 25, size = 1, color = "red")
plot4
plot1
plot5 <- ggplot(data.frame(alt = rexp(1000, lambda))) + geom_bar(aes(alt))
plot5
?print
?display
facet_grid(plot1)
plot2 <- plot2 + facet()
plot2
plot2 <- plot2 + facet_grid()
p <- facet_grid(facets = c(plot1,plot2))
p <- plot_base + facet_grid(facets = c(plot1, plot2)~.)
p
p <- facet_grid(facets = c(plot1, plot2)~.)
p
p <- plot_base + facet_grid(facets = c(plot1, plot2)~.)
p
p <- plot_base + facet_grid(facets = aes(c(Mean, Variance)~.)) + geom_bar()
p <- plot_base + facet_grid(facets = c(Mean, Variance)~.) + geom_bar()
g
p
par(mfrow = c(1,2))
plot1
plot2
plot3
par(mfrow = c(1,2))
plot(1:4,1:4)
data("ToothGrowth")
head(ToothGrowth)
?ToothGrowth
unique(ToothGrowth$dose)
unique(ToothGrowth$supp)
x <- data("ToothGrowth")
library(ggplot2)
qplot(len, data = x, factor(supp), facets = dose )
head(x)
data("ToothGrowth")
x <- ToothGrowth
qplot(len, data = x, factor(supp), facets = dose )
head(x)
x$dose
qplot(len, data = x, factor(supp), facets = "dose" )
qplot(len, data = x, factor(supp), facets(dose) )
qplot(len, data = x, factor(supp), col = dose )
qplot(len, data = x, factor(supp), facets =  dose~. )
qplot(len, data = x, factor(supp), facets =  .~dose, geom = "violin")
t.test(x$len,x$supp)
?t.test
t.test(x$len,x$dose)
t.test(x[len & supp = "VC"],x[len & supp = "VC"])
x[len & supp = "VC"]
x[len & supp="VC"]
x[len & supp="VC",]
x[supp="VC",]
x[supp=="VC",]
x["supp"=="VC",]
x[,"supp"=="VC"]
x["supp"="VC",]
x["supp"=="VC",]
x["supp"==VC,]
x["supp"=="VC",]
x[["supp"=="VC"]]
x[[supp="VC"]]
x[[supp]]="VC"
x$supp="VC"
x$supp=="VC"
x <- ToothGrowth
x$supp=="VC"
x[x$supp=="VC",1]
t.test(x[x$supp=="VC",1],x[!x$supp=="VC",1])
qt(.95,8)
qt(.95,8)*30
qt(.95,10)*30
qt(.95,8)
2/qt(.95,8)
6/qt(.95,8)
qt(.95,15.04)
qt(.975,15.04)
6/qt(.975,8)
30*qt(.975,8)
qt(.975,18)*.035054
qt(.975,198)*(99/4+99*4)/98*2500
qt(.975,198)*(99/4+99*4)/98
qt(.975,198)*(99/4+99*4)/(98*2500)
x<-{140,138,150,148,135}
x<-c(140,138,150,148,135)
y<-c(132,135,151,146,130)
x-y
t.test(x-y)
qt(.975, 8)
2.3*900-1100
1100-230
t.test(c(1,1,1,0),c(0,0,0,1))
(8*1.5*1.5+8*1.8*1.8)/16
4/2.75
x in 0:3
X <- 1:10:.1
?span
qt(.98,17)
qt(.90,17)
qt(.90,8)
q()
q()
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x*w
mean(x*w)
mean(x)/mean(w)
f <- function(x){}
f <- function(x){2(.18-x)^2+(-1.54-x)^2+3(.42-x)^2+(.95-x)^2}
f(.0025)
f(x) <- function(x){2(.18-x)^2+(-1.54-x)^2+3(.42-x)^2+(.95-x)^2}
f<-function(x){disp(2(.18-x)^2+(-1.54-x)^2+3(.42-x)^2+(.95-x)^2)}
f(1)
f<-function(x){2(.18-x)^2+(-1.54-x)^2+3(.42-x)^2+(.95-x)^2}
f(1)
f<-function(x){y<-2(.18-x)^2+(-1.54-x)^2+3(.42-x)^2+(.95-x)^2; y}
f(1)
g<-function(a,b){a+b}
g(1,1)
f<-function(x){2*(.18-x)^2+(1.54+x)^2+3*(.42-x)^2+(.95-x)^2}
f(1)
f(.0025)
f(.3)
f(.1471)
f(1.077)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
mean(x)
mean(y)
(mean(y)-y[1])/(mean(x)-x[1])
lm(y ~ x)
?lm
lm(y ~ x-1)
data(mtcars)
lm(mtcars$mpg ~ mtcars$wt)
lm(mtcars$mpg ~ mtcars$wt -1)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
var(x)
xt<-x/var(x)
xt-mean(xt)
y<-xt-mean(xt)
mean(y)
var(y)
xt<-x-mean(x)
y<-xt/var(xt)
y
mean(y)
var(y)
y<-xt/var(xt)^.5
var(y)
mean(y)
y
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
download.packages("manipulate")
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(mtcars)
data(mtcars)
x<-mtcars
summary(x)
library(ggplot2)
library(ggally)
install.packages("ggally")
install.packages("GGally")
library(GGally)
g= ggpairs(x, lower = list(continuous = "smooth"), params c(method  = "loess"))
g
g= ggpairs(x, lower = list(continuous = "smooth"), params = c(method  = "loess"))
g
?mtcars
q()
library(caret); library(kernlab); data(spam);
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~ ., data=training, method="glm")
modelFit
setwd("~/R/Data Science/Machine_learning")
datafile<-read.csv(pml-training.csv)
datafile<-read.csv("pml-training.csv")
inTrain <- createDataPartition(y=datafile$classe, p=0.75, list=FALSE)
training <- datafile[inTrain,]
modelFit <- train(classe ~ ., data=training, method="glm")
